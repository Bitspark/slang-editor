// COLORS
@import "~jointjs/css/layout";
@import "variables";

$type-color-number: $blue;
$type-color-string: $brown;
$type-color-boolean: $orange;
$type-color-binary: $green;
$type-color-primitive: $cyan;
$type-color-trigger: rgba($grey, 0.5);
$type-color-generic: $purple;
$type-color-ghost: rgba($purple, 0.5);

$port-color-stroke: $black;
$port-color-valid: $green;

$blueprint-color-fill: $white;

$blackbox-color-fill: $white;
$blackbox-color-stroke: $black;
$blackbox-color-label: $black;

.sl-view {
	width: 100%;
	height: 100%;
}


.sl-floater {
	/*
	.box {
		border-radius: 2px;
		padding: 0.25rem;
	}
	*/
}


// BLACKBOX

.sl-blackbox,
.sl-outer {
	&.sl-is-selected {
		> rect {
			// add styling for selected component
			stroke: #217ce8;
			stroke-width: 2.5px;
		}
	}
}

.sl-blackbox,
.sl-blackbox-ghost {
	.sl-rectangle {
		fill: $blackbox-color-fill;
		stroke: $black;
		stroke-width: 1.5px;
		paint-order: stroke;
	}

	.sl-label {
		fill: $blackbox-color-label;
	}
}

.sl-blackbox-ghost {
	.sl-rectangle {
		fill-opacity: 0.1;
	}
}

// OUTER

.sl-outer {
	.sl-rectangle {
		stroke: $black;
		fill: transparent;
		stroke-width: 1.5px;
		stroke-dasharray: 2;
	}

	&.sl-blupr-elem {
		.sl-rectangle {
			cursor: not-allowed;
			fill: transparentize($black, 0.9);
		}
	}
}

// BLUEPRINT PORT

.sl-blueprint-port {
	.sl-label {
		fill: $blackbox-color-label;
	}
}

// PORT

.sl-port {
	@extend %transition;
	stroke-width: 0;
	stroke-opacity: 0.6;
	transition-property: stroke-width;

	&.sl-stripe {
		stroke: white;
		fill: white;
	}

	&.sl-type-number {
		stroke: $type-color-number;
		fill: $type-color-number;
	}

	&.sl-type-string {
		stroke: $type-color-string;
		fill: $type-color-string;
	}

	&.sl-type-boolean {
		stroke: $type-color-boolean;
		fill: $type-color-boolean;
	}

	&.sl-type-binary {
		stroke: $type-color-binary;
		fill: $type-color-binary;
	}

	&.sl-type-primitive {
		stroke: $type-color-primitive;
		fill: $type-color-primitive;
	}

	&.sl-type-trigger {
		stroke: $type-color-trigger;
		fill: $type-color-trigger;
	}

	&.sl-type-generic {
		stroke: $type-color-generic;
		fill: $type-color-generic;
	}

	&.sl-type-ghost {
		stroke: $type-color-ghost;
		fill: $type-color-ghost;
	}
}

.sl-connection-wrap {
	fill: none;
	stroke: $grey;
	stroke-width: 14px;
	stroke-opacity: 0;
	stroke-linecap: square;

	&:hover {
		stroke-opacity: 0.3;
	}

	&.sl-is-selected {
		stroke: $primary;
		stroke-opacity: 0.2;

		~ .link-tools {
			display: initial;
		}
	}
}

.sl-connection {
	vector-effect: none;
	fill: none;

	&.sl-type-number {
		stroke: $type-color-number;
	}

	&.sl-type-string {
		stroke: $type-color-string;
	}

	&.sl-type-boolean {
		stroke: $type-color-boolean;
	}

	&.sl-type-binary {
		stroke: $type-color-binary;
	}

	&.sl-type-primitive {
		stroke: $type-color-primitive;
	}

	&.sl-type-trigger {
		stroke: $type-color-trigger;
	}

	&.sl-type-generic {
		stroke: $type-color-generic;
	}

	&.sl-type-ghost {
		stroke: $type-color-ghost;
	}
}

// JOINT

@keyframes port-pulse {
	from {
		stroke-width: 0;
	}
	to {
		stroke-width: 8px;
	}
}

.joint-paper {
	font-family: $font-family-default;
	font-size: $font-size;
}

.joint-highlight-stroke {
	stroke: none;
}

.available-magnet {
	path {
		animation-name: port-pulse;
		animation-duration: 500ms;
		animation-iteration-count: infinite;
		animation-direction: alternate;
		animation-timing-function: ease-in;
	}
}

.tool-remove {
	circle {
		fill: $red;
	}

	path {
		fill: $white;
	}
}

@import "component/base";
